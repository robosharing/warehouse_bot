amcl:
  ros__parameters:
    use_sim_time: true
    alpha1: 0.0001  # Увеличены для учета возможных шумов в одометрии
    alpha2: 0.0001
    alpha3: 0.0001
    alpha4: 0.0001
    alpha5: 0.0001
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.02
    pf_z: 0.85
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 2
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.02
    tf_broadcast: true
    transform_tolerance: 0.5
    update_min_a: 0.06
    update_min_d: 0.025
    z_hit: 0.7
    z_max: 0.001
    z_rand: 0.059
    z_short: 0.24
    scan_topic: /scan2


    # Initial Pose
    set_initial_pose: False
    initial_pose.x: 0.0
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0     

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True


bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
      bt_xml_filename: "navigate_w_recovery_and_replanning_only_if_path_becomes_invalid.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# controller_server:
#   ros__parameters:
#     controller_frequency: 30.0
#     current_goal_checker: "goal_checker"  # Добавьте этот параметр
#     goal_checker_plugins: ["goal_checker"]
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.5
#       yaw_goal_tolerance: 1.0
#       stateful: True
#     controller_plugins: ["FollowPath"]
#     FollowPath:
#         plugin: "nav2_mppi_controller::MPPIController"
#         time_steps: 56
#         model_dt: 0.05
#         batch_size: 2000
#         vx_std: 0.2
#         vy_std: 0.2
#         wz_std: 0.4
#         vx_max: 0.5
#         vx_min: -0.55
#         vy_max: 0.5
#         wz_max: 1.9
#         iteration_count: 1
#         prune_distance: 2.5
#         transform_tolerance: 0.1
#         temperature: 0.3
#         gamma: 0.015
#         motion_model: "Ackermann"
#         visualize: true
#         reset_period: 1.0 # (only in Humble)
#         regenerate_noises: false
#         TrajectoryVisualizer:
#             trajectory_step: 5
#             time_step: 3
#         AckermannConstraints:
#             min_turning_r: 0.02
#         critics:
#             [
#                 "ConstraintCritic",
#                 "ObstaclesCritic",
#                 "GoalCritic",
#                 "GoalAngleCritic",
#                 "CostCritic",
#                 "PathAlignCritic",
#                 "PathFollowCritic",
#                 "PathAngleCritic",
#                 "PreferForwardCritic",
#             ]
#         ConstraintCritic:
#             enabled: true
#             cost_power: 1
#             cost_weight: 4.0
#         GoalCritic:
#             enabled: true
#             cost_power: 1
#             cost_weight: 5.0
#             threshold_to_consider: 1.4
#         GoalAngleCritic:
#             enabled: true
#             cost_power: 1
#             cost_weight: 3.0
#             threshold_to_consider: 0.5
#         PreferForwardCritic:
#             enabled: false
#             cost_power: 1
#             cost_weight: 5.0
#             threshold_to_consider: 0.5
#         # ObstaclesCritic:
#         #     enabled: true
#         #     cost_power: 1
#         #     repulsion_weight: 1.5
#         #     critical_weight: 20.0
#         #     consider_footprint: true
#         #     collision_cost: 10000.0
#         #     collision_margin_distance: 0.15
#         #     near_goal_distance: 0.5
#         #     inflation_radius: 0.25 # (only in Humble)
#         #     cost_scaling_factor: 10.0 # (only in Humble)
#         PathAlignCritic:
#             enabled: true
#             cost_power: 1
#             cost_weight: 14.0
#             max_path_occupancy_ratio: 0.05
#             trajectory_point_step: 3
#             threshold_to_consider: 0.5
#             offset_from_furthest: 20
#             use_path_orientations: true
#         CostCritic:
#           enabled: true
#           cost_power: 3
#           cost_weight: 3.81
#           critical_cost: 300.0
#           consider_footprint: true
#           collision_cost: 1000000.0
#           near_goal_distance: 1.0
#         PathFollowCritic:
#             enabled: true
#             cost_power: 1
#             cost_weight: 5.0
#             offset_from_furthest: 5
#             threshold_to_consider: 1.4
#         PathAngleCritic:
#             enabled: true
#             cost_power: 1
#             cost_weight: 2.0
#             offset_from_furthest: 4
#             threshold_to_consider: 0.5
#             max_angle_to_furthest: 1.0
#             forward_preference: true
#             mode: 0
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5
      yaw_goal_tolerance: 1.25
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 2.0
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 3.0
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0


controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 15
      height: 15
      resolution: 0.05
      footprint: "[ [1.2, 0.27], [1.2, -0.27], [-0.2, -0.27], [-0.2, 0.27] ]"
      use_radius: false
      plugins: ["static_layer", "inflation_layer", "obstacle_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan2
          obstacle_max_range: 4.5
          obstacle_min_range: 0.5
          raytrace_max_range: 4.0
          raytrace_min_range: 0.4
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          сlearing: True
          marking: True
          data_type: "LaserScan"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.3  # безопасное расстояние от препятствия
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 1.7
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan2 # HERE
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 1.7 # расстояние от препятсвия
      always_send_full_costmap: True
# costmap_filter_info_server:
#   ros__parameters:
#     use_sim_time: True
#     type: 0
#     filter_info_topic: "/costmap_filter_info"
#     mask_topic: "/keepout_filter_mask"
#     base: 0.0  # Значение по умолчанию
#     multiplier: 1.0  # Значение по умолчанию
    
# filter_mask_server:
#   ros__parameters:
#     use_sim_time: True
#     frame_id: "map"
#     topic_name: "/keepout_filter_mask"
#     yaml_filename: "mask.yaml"  # Provide the path to your filter mask yaml file

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "warehouse_map.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True


planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 10.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid"
#       tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
#       downsample_costmap: false           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       allow_unknown: false                # allow traveling in unknown space
#       max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
#       max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
#       motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Redds-Shepp
#       cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
#       angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
#       analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 3.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
#       minimum_turning_radius: 0.40        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
#       reverse_penalty: 2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
#       non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
#       rotation_penalty: 5.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
#       lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
#       allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.   
#       smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further
  

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: [
                      "spin",
                      "backup",
                      "wait",
                      "drive_on_heading"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.0
    min_rotational_vel: 0.0
    rotational_acc_lim: 0.0

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

smoother_server:
  ros__parameters:
    use_sim_time: true
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: true
#     smoothing_frequency: 20.0
#     scale_velocities: False
#     feedback: "OPEN_LOOP"
#     max_velocity: [3.5, 0.0, 1.0]  # Увеличение максимальных скоростей
#     min_velocity: [-3.5, 0.0, -1.0]  # Увеличение минимальных скоростей
#     max_accel: [2.0, 0.0, 2.0]  # Увеличение максимального ускорения
#     max_decel: [-5.0, 0.0, -5.0]  # Увеличение максимального торможения
#     odom_topic: "odom"
#     odom_duration: 0.1
#     deadband_velocity: [0.5, 0.5, 0.5]
#     velocity_timeout: 1.0